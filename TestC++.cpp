#include "CVectorList.h"

int main()
{
    /*
        В ходе выполнения тестового задания мотивами служило следующее:
        1. В рамках задания отсутствует необходимость в расширении функционала класса Вектор - весь смысл Вектора сводится к хранению размерности и возвращению длины вектора.
        2. Исходя из чего отдано предпочтение наследованию (по аналогии с тем как бОльшие измерения хранят меньшие).
        3. Такой подход позволяет избавиться от дублирования кода, возникающем при объявлении полного перечня измерений в каждом из новых классов Векторов.
        4. Ограничившись лишь приведением типа указателя на Вектор с наименьшим измерением - одним.
        5. При выполнении задания в стенах Компании я был сконцентрирован и следовал пунктам задания по порядку.
           В связи с чем мной был упущен предложенный Вами способ запуска программы, не предполагающий приведения к типу указателя на одномерный Вектор.
           Что повлекло спешное переписывание и добавление методов под каждый из отдельных классов.
        Прошу Вас ознакомиться и протестировать предложенный мной ниже способ запуска программы.
    */
    CVector2 v1 = CVector2(2.45, 2.1);
    CVector1 v2 = CVector1(3.01);
    CVector1 v3 = CVector1(4.5);
    CVector2 v4 = CVector2(3.16, 4.3);
    CVector2 v5 = CVector2(2.11, 2.41);
    CVectorList list;
    list.Add((CVector1*)&v1);
    list.Add((CVector1*)&v2);
    list.Add((CVector1*)&v3);
    list.Add((CVector1*)&v4);
    list.Add((CVector1*)&v5);
    list.Print();
}